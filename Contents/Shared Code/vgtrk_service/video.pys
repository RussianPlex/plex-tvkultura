from base import ElementBase, JSONBasedElement, LinkElement, PageElement


class NextPageElement(LinkElement):

    @property
    def href(self):
        return self.format_url(self.element.get('data-url'))


class VideoElement(ElementBase):

    # Not a true abstract class, can't use below line because of RestrictedPython.
    # __metaclass__ = ABCMeta

    @property
    def href(self):
        pass

    @property
    def thumb(self):
        pass

    @property
    def title(self):
        pass


class ViewTypeElement(ElementBase):

    # Not a true abstract class, can't use below line because of RestrictedPython.
    # __metaclass__ = ABCMeta

    container_pattern = None
    container_element = None

    @property
    def is_available(self):
        try:
            self.container  # Will raise error if element not found.
            return True
        except KeyError:
            return False

    @property
    def container(self):
        if self.container_element is None:
            element = self.find_one(self.container_pattern)
            self.container_element = self.create_element(ElementBase, element)
        return self.container_element

    @property
    def list(self):
        pass


class ViewTypePictureVideo(VideoElement):

    thumb_pattern = ".//*[contains(@class,'pic')]/img"
    title_dom_element = None
    title_pattern = ".//*[contains(@class,'info')]/a"

    @property
    def ajaxurl(self):
        return self.format_url(self.find_one(self.title_pattern).get('data-ajaxurl'))

    @property
    def has_children(self):
        return 'with-children' in self.title_element.get('class')

    @property
    def href(self):
        return self.format_url(self.title_element.get('href'))

    @property
    def thumb(self):
        thumb_url = self.find_one(self.thumb_pattern).get('data-original')
        return self.format_url(thumb_url)

    @property
    def title(self):
        return self.title_element.text.strip()

    @property
    def title_element(self):
        if self.title_dom_element is None:
            self.title_dom_element = self.find_one(self.title_pattern)
        return self.title_dom_element


class ViewTypePictureVideoChild(VideoElement):

    thumb_pattern = ViewTypePictureVideo.thumb_pattern
    title_pattern = ".//a[contains(@class,'name')]"

    @property
    def href(self):
        return self.format_url(self.find_one(self.title_pattern).get('href'))

    @property
    def thumb(self):
        thumb_url = self.find_one(self.thumb_pattern).get('src')
        return self.format_url(thumb_url)

    @property
    def title(self):
        return self.find_one(self.title_pattern).text.strip()


class ViewTypePictureContainer(ViewTypeElement):

    container_pattern = ".//*[@id='viewtype_picture']"
    item_pattern = ".//ul[@id='items']/li[contains(@class,'item')]"
    next_page_pattern = ".//*[@id='get_more']"

    @property
    def next_page(self):
        element = self.find_one(self.next_page_pattern, require=False)
        return self.create_element(NextPageElement, element) if element is not None else None

    @property
    def list(self):
        return [self.create_element(ViewTypePictureVideo, e) for e in self.container.find_all(self.item_pattern)]


class VideoListPage(PageElement):

    title_pattern = ".//*[@id='main']//span[contains(@class,'title')]//span[@itemprop='name']"
    view_types_list = None
    view_type_classes = {
        'picture': ViewTypePictureContainer
    }

    @property
    def view_types(self):
        if self.view_types_list is None:
            content = self.find_one(self.content_pattern)
            objects = {k: self.create_element(c, content) for k, c in self.view_type_classes.iteritems()}
            self.view_types_list = {k: o for k, o in objects.iteritems() if o.is_available}
        return self.view_types_list

    def view_type(self, name):
        if name not in self.view_type_classes:
            raise ValueError('Invalid view type %s' % name)
        elif name not in self.view_types:
            return None
        return self.view_types[name]


class VideoListChildren(JSONBasedElement):

    item_pattern = ".//ul[contains(@class, 'items')]/li[contains(@class,'item')]"

    def __init__(self, json, url, base_url, page_title):
        JSONBasedElement.__init__(self, json, url, base_url, page_title)

    @property
    def list(self):
        return [self.create_element(ViewTypePictureVideoChild, e) for e in self.content.find_all(self.item_pattern)]


class VideoListPaginated(JSONBasedElement, VideoListPage):

    def __init__(self, json, url, base_url, page_title, next_title):
        replace_pattern = '<ul id="items">%s</ul>'
        if 'is_last_page' not in json or not json['is_last_page']:
            next_page = '<a id="get_more" data-url="%s">%s</a>' % (url, next_title)
            replace_pattern = replace_pattern + next_page
        container = '<div id="viewtype_picture">%s</div>' % replace_pattern
        self.html_stub = JSONBasedElement.html_stub % container
        JSONBasedElement.__init__(self, json, url, base_url, page_title)


class VideoPage(PageElement):

    full_text_pattern = ".//div[contains(@class,'anonse-full-text')]"
    title_pattern = VideoListPage.title_pattern
    video_id_regex = Regex('/video/id/(\d+)/')
    video_iframe_href_pattern = ".//*[@id='main']//div[contains(@class,'video-player')]/iframe"

    @property
    def datavideo_href(self):
        return self.format_url('//player.vgtrk.com/iframe/datavideo/id/%s/sid/vh' % self.video_id)

    @property
    def full_text(self):
        return self.format_text(self.find_one(self.full_text_pattern))

    @property
    def short_text(self):
        return self.format_text(self.find_one(self.full_text_pattern).getprevious())

    @property
    def video_id(self):
        return self.video_id_regex.search(self.video_iframe_href).group(1)

    @property
    def video_iframe_href(self):
        return self.format_url(self.find_one(self.video_iframe_href_pattern).get('src'))
